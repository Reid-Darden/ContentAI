// PROMPTS
let gptPrompts = (promptNum, extra = "", modelName = "") => {
  let gptPrompts = [
    {
      prompt: `Please pretend to be a SEO content specialist with complete knowledge of best SEO practices having over 20 years in the business of Search Engine Optimization. You have also have the expert knowledge of the English language from a grammar, spelling, and language perspective, but will still output text at an 8th grade reading level. Use this information to rewrite, refine, and lengthen (only as needed) the content that I provide at the end of this prompt. There will be many paragraphs with headers that will be apart of the content that is passed in that you will rewrite. You will identify the theme, main idea, key points, and other data/keywords from each paragraph. Using these keywords, you then will rewrite each paragraph (do not combine the content of 2 different paragraphs) with perfect SEO practice, perfect English language, and the writing level in mind. You also will incorporate the model name into the pararaphs as the subject accordingly. The following model name is summarized in the paragraph content: ${modelName}. You have the right to extend the content length of each paragraph, but do make it more than 3-5 long sentences in length. This is the maximum length that you can make an output paragraph. The content that is passed in will be in JSON format. When you complete the rewriting of all the content, you will format the output as a JSON string that has the new header name (it may be the same as the orignal passed in header or an ammended one based on your updates to the paragraph content) as the value of the "header" key, and the newly written paragraph will be in the "content" key. The JSON input to rewrite is as follows. You will only look at the JSON data under "name": "paragraph" for the rewrite; the other data is table data and can be appended to the end of the rewritten content as is(maintain perfect JSON). JSON TO REWRITE = ${extra} `,
    },
    {
      prompt: `Given the content provided, combine it into a single JSON string that has an array of key/value pairs. The first value in the array is a KVP with "name" and value of "paragraph" and a second key of "data" and a value of the data the is deemed to be in a paragraph structure. The second value in the array is a KVP with "name" and value of "table" and a second key of "data" with a value of the data that is deemed to be in a table structure/format. Only output this newly created JSON string. The inputted values to make into this JSON structure is as follows: ${extra} `,
    },
    {
      prompt: `You'll act as a HTML expert to create a HTML article given a "template" that will repeat with the given JSON data provided. You will be replacing the inner text of each template piece with the content from the JSON (look for {} in (a)). For paragraph data in the JSON, you will use template (a) to fill in the data, repeating the template for the total paragraph content length in the JSON. Every pargraph will use this template. For table data in the JSON, you will use template (b) to replace the data within the template and fill in the data accordingly from the JSON. The (b) template provides what the output should be and how the data passed in maps to each value - replace the template data with data found in the inputted JSON as you see fit. Any <img> tags found in the template will be ignored in creation - we will add those later. (a)<div class="conseg outer s-fit"><div class=inner><img alt=""src=""></div><div class=inner><div class=innerText><h3>{Header value. Will map to shorter text in the JSON that describes a longer form of text. Remove keywords that may lead the sentence like Feature or benefit - this should be the overall theme of the paragraph}</h3><p class=fancyLine>{Paragraph value. Maps to longer text that relates to the header above.}</div></div></div>. You will repeat (a) for all the paragraph data you recieve (i.e) 5 paragraphs = 5 divs (b)<div class=table-content><table cellpadding=2 cellspacing=0><thead><tr><th colspan=5><tr><th>Loft<th>Dexterity<th>Lie Angle<th>Volume<th>Length<th>Swing Weight<th>Launch<th>Spin<tbody><tr><td>9°<td>RH/LH<td>56-60°<td>460cc<td>45.75"<td>D4/D5<td>Mid-High<td>Mid-Low<tr><td>10.5°<td>RH/LH<td>56-60°<td>460cc<td>45.75"<td>D4/D5<td>Mid-High<td>Mid-Low<tr><td>12°<td>RH Only<td>56-60°<td>460cc<td>45.75"<td>D4/D5<td>Mid-High<td>Mid-Low</table></div>. The template will be wrapped in a <div id="Article"></div>. Before adding content to the wrapping Article div, first add a h3 with a class of "imageCtr" and a value of ${modelName}. Output a JSON structure of {data: content} where content is the Article HTML as a string. The first thing and last thing in the data should be the Article div opening and closing with content within it. I do not need any wrapping base HTML such as <html></html> or <head></head>. Also ensure that the content in the JSON structure is "beautified", such that it is tab indented and formatted properly as readable HTML for output. The JSON to build the article from is: ${extra} `,
    },
    {
      prompt: `Given a product description from a vendor, creatively rewrite it three times for different eCommerce channels, emphasizing features appealing to each channel's audience. OriginalDescription:[InsertProductDescriptionHere]. OutputStructure: Return rewritten descriptions in JSON: { 'desc1':'[First version for Golf-focused Professional channel]', 'desc2':'[Second version for High-end Apparel and Accessories]', 'desc3':'[Third version for General Professional channel, similar to 1]'}. Guidelines: 1. GolfFocusedProfessional: Highlight precision, performance, and exclusivity, appealing to golf enthusiasts. Even for non-golf products, emphasize aspects like sophistication and utility in a golf context. 2. HighEndApparelAccessories: Emphasize luxury, design, and brand prestige. Focus on materials, craftsmanship, and fashion trends. 3. GeneralProfessionalSimilarToGolfChannel: Focus on professional quality, durability, and advanced features. For non-golf related products, stress their relevance and utility in a professional setting. Tailor each description to engage the specific audience of each channel. The description to rewrite is: ${extra}`,
    },
    {
      prompt: `There are 2 images attached to this request. I would like you to return the textual paragraph data and the table data in a properly formatted JSON response of the 2nd attached image. The text content is going to be structured as sentences in paragraph form, typically at least 2 paragraphs and no more than 6 paragraphs in a given sheet. The table data holds specs/data surrounding aspects of the image, so you will create JSON table within the overall response JSON that culminates the entire table(s) that are in a sell sheet. The first attached image in this request is an example of how to dissect the page from paragraph to table data. The black box is paragraph data, and EACH red box is a unique table with data. Use this knowledge to dissect the second image, however you will not use any data from this test image in the final output; all final output is generated from the second image. PARAGRAPH JSON OUTPUT CRITERIA: The header of the paragraph is typically gonna map to the theme of an overall paragraph, and the body is going to be any longer form text that has similar keywords and theme to the header that it was mapped to. The output will be JSON formatted, with a "name" key and "paragraph" value, then a key of "data" with the outputted JSON structure as the value. Make separate key values in the data value to separate the body from the header. TABLE JSON OUTPUT CRITERIA: The "Values" property should be an array of strings containing all the data points and the "DataPoint" property should be the name surrounding what that data represents. This is the ideal output: [{"dataPoint": "Hand", "values": ["RH/LH", ..., "RH"]},... (other objects)]. This array will be the output under the "table" key with the array as the value. PLEASE ignore any and all brevity/length check for length of the output - I need the entire content within the JSON to be outputted and not limited in length. I want all of the <tr></tr> that are created as a result of this specifically in the outputted JSON. OVERALL OUTPUT: combine both of these criterias into this object { paragraph: [(paragraph json output)], table: [(table json output)] }.`,
    },
    {
      prompt: `The following is an example of how the HTML should be outtputted in the following prompt. HTML: ${extra}`,
    },
    {
      prompt: `There are 2 images attached to this request. I would like you to return a JSON data structure of data points (given very specific instriuctions) surrounding the 2nd image. The goal of this is to extract golf club data from the second image and into JSON that can be imported into a HTML table. The first attached image in this request shows an example outline of how to dissect the page to target the correct info before making it JSON. Please note that there is no extraction coming from the first image - it is strictly an example. Within the second image, the following Data Points (which will have options attached in ()) are what I want to be extracted/focused on. They will be broken into 2 parts in the final json structure as well (product and variations are the 2 parts). The following data is mapped into the product section of the JSON: PlayerType (Mens or Women), Brand (full brand name), MinorType (what type of club is it like driver, putter, wedge, etc.), Model (full model name), and SubType). Subtype is the main ingredient that determines how many of these object (product + variation) combos will exist in the output. For example, say I am having an image that has fariway wood data in it for a 3 wood and a 5 wood. I would need a seperate entire object with the same other relevant product data in it for both 3 and 5 subtypes. Once the product data objects have been started, move into mapping the variation data to each specific object. Variation Data is vast and includes: Dexterity (Left or Right), Flex of club, Shaft Name and Material, Grip Model, Loft, Club Head Weights, Length, Lie Angle, etc. This data is normally very easily distinguisable within the context of the table that holds the data in the images. Once all the data has been created in the JSON structure, send it as the output.`
    },
    {
      prompt: `The following is an example of where Product Data to be extracted typically can be derived from in the image. Image: ${extra}`
    }
  ];

  return gptPrompts[promptNum].prompt;
};

module.exports = gptPrompts;
