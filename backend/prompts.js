// PROMPTS
let gptPrompts = (promptNum, extra, modelName = "") => {
  let gptPrompts = [
    {
      prompt: `Use the following criteria to anaylze, rewrite, and output the JSON content passed in. CRITERIA: The header of the paragraph is typically gonna map to the theme of an overall paragraph, and the body is going to be any longer form text that has similar keywords and theme to the header that it was mapped to. The output will be JSON formatted, with a "name" key and "paragraph" value, then a key of "data" with the outputted JSON stucuture as the value. Make seperate key values in the data value to seperate the body from the header, and do that for every entry. For this request, only look at text and headers apart of paragraphs - ignore data that would be found in a table (do not need ANY table data in the output). ONLY OUTPUT THE JSON STRUCTURE. I ALSO NEED THE JSON MINIFIED INTO ITS SIMPLEST FORM; THAT IS TO SAY IT WOULD NOT HAVE ANY REGULAR EXPRESSION CHARACTERS (some of the characters to watch out for are /r, //r, or /", but there may be others that are probably going to be regular expressions). The JSON to reformat is as follows. The content within the JSON should still read in normal English characters and numbers at your discrection. Once you have cleaned the following JSON, then complete the commands above upon it. JSON IS AS FOLLOWS: ${extra} 
	  `,
    },
    {
      prompt: `CRITERIA: The passed in data will that of which would be deemed to be found in a table format from the JSON. You will construct an output JSON structure that extracts the table data from the orignal JSON into this new custom structure. There is a good chance that the data will be properly JSON formatted, but the content of the JSON itself may need manipulating. Make your best judgment with the data found in each array of objects within the JSON and determine the relevant numerical data in relation to the theme of that row of data. Then construct the final output structure with the updated content. The following is an example of how the data should be outputted. Also note the removal of special characters (some maybe be double slashed (//) or some maybe be normal regular expressions (/r, etc.)). The "Values" property should be an array of strings containing all the data points and the "DataPoint" property should be the name surrounding what that data represents. This is the ideal output: [{"dataPoint": "Hand", "values": ["RH/LH", ..., "RH"]},... (other ojects)]. All this would be within an overall object with "name" property of "table" and "data" property of the previous array of data. PLEASE ignore any and all brevity/length check for length of the output - I need the entire content within the JSON to be outputted and not limited in length. I want all of the <tr></tr> that are created as a result of this specifically. Output nothing but the table data in JSON. NO TEXT SURROUNDING THE JSON. The input JSON is: ${extra}`,
    },
    {
      prompt: `Please pretend to be a SEO content specialist with complete knowledge of best SEO practices having over 20 years in the business of Search Engine Optimization. You have also have the expert knowledge of the English language from a grammar, spelling, and language perspective, but will still output text at an 8th grade reading level. Use this information to rewrite, refine, and lengthen (only as needed) the content that I provide at the end of this prompt. There will be many paragraphs with headers that will be apart of the content that is passed in that you will rewrite. You will identify the theme, main idea, key points, and other data/keywords from each paragraph. Using these keywords, you then will rewrite each paragraph (do not combine the content of 2 different paragraphs) with perfect SEO practice, perfect English language, and the writing level in mind. You also will incorporate the model name into the pararaphs as the subject accordingly. The following model name is summarized in the paragraph content: ${modelName}. You have the right to extend the content length of each paragraph, but do make it more than 3-5 long sentences in length. This is the maximum length that you can make an output paragraph. The content that is passed in will be in JSON format. When you complete the rewriting of all the content, you will format the output as a JSON string that has the new header name (it may be the same as the orignal passed in header or an ammended one based on your updates to the paragraph content) as the value of the "header" key, and the newly written paragraph will be in the "content" key. The JSON input to rewrite is as follows. You will only look at the JSON data under "name": "paragraph" for the rewrite; the other data is table data and can be appended to the end of the rewritten content as is(maintain perfect JSON). JSON TO REWRITE = ${extra} `,
    },
    {
      prompt: `Given the content provided, combine it into a single JSON string that has an array of key/value pairs. The first value in the array is a KVP with "name" and value of "paragraph" and a second key of "data" and a value of the data the is deemed to be in a paragraph structure. The second value in the array is a KVP with "name" and value of "table" and a second key of "data" with a value of the data that is deemed to be in a table structure/format. Only output this newly created JSON string. The inputted values to make into this JSON structure is as follows: ${extra} `,
    },
    {
      prompt: `You will act as a HTML expert and will create a HTML article given a "template" that you will repeat with the given JSON data provided. You will be replacing the inner text of each template piece with the content from the JSON (look for {} in (a)). For paragraph data in the JSON, you will use template (a) to fill in the data, repeating the template for the total paragraph content length in the JSON. Every pargraph will use this template. For table data in the JSON, you will use template (b) to replace the data within the template and fill in the data accordingly from the JSON. The (b) template provides what the output should be and how the data passed in maps to each value - replace the template data with data found in the inputted JSON as you see fit. Any <img> tags found in the template will be ignored in creation - we will add those later. (a)<div class="conseg outer s-fit"><div class=inner><img alt=""src=""></div><div class=inner><div class=innerText><h3>{Header value. Will map to shorter text in the JSON that describes a longer form of text. Remove keywords that may lead the sentence like Feature or benefit - this should be the overall theme of the paragraph}</h3><p class=fancyLine>{Paragraph value. Maps to longer text that relates to the header above.}</div></div></div> (b)<div class=table-content><table cellpadding=2 cellspacing=0><thead><tr><th colspan=5><tr><th>Loft<th>Dexterity<th>Lie Angle<th>Volume<th>Length<th>Swing Weight<th>Launch<th>Spin<tbody><tr><td>9°<td>RH/LH<td>56-60°<td>460cc<td>45.75"<td>D4/D5<td>Mid-High<td>Mid-Low<tr><td>10.5°<td>RH/LH<td>56-60°<td>460cc<td>45.75"<td>D4/D5<td>Mid-High<td>Mid-Low<tr><td>12°<td>RH Only<td>56-60°<td>460cc<td>45.75"<td>D4/D5<td>Mid-High<td>Mid-Low</table></div>. The template will be wrapped in a <div id="Article"></div>. Before adding content to the wrapping Article div, first add a h3 with a class of "imageCtr" and a value of ${modelName}. Output a JSON structure of {data: content} where content is the Article HTML as a string. The first thing and last thing in the data should be the Article div opening and closing with content within it. I do not need any wrapping base HTML such as <html></html> or <head></head>. Also ensure that the content in the JSON structure is "beautified", such that it is tab indented and formatted properly as readable HTML for output. The JSON to build the article from is: ${extra} `,
    },
  ];

  return gptPrompts[promptNum].prompt;
};

module.exports = gptPrompts;
